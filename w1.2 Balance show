import json
import csv
import time
import logging
import requests
import hmac
import hashlib
import base64
from datetime import datetime, timezone

# Налаштування логування
logging.basicConfig(filename='log.txt', level=logging.INFO, 
                    format='%(asctime)s %(levelname)s:%(message)s')

# Читання конфігураційного файлу
with open('config.json', 'r') as file:
    config = json.load(file)

# Читання API ключів
with open('api_keys.json', 'r') as file:
    api_keys = json.load(file)

# Читання адрес із файлу CSV
with open('wallets.csv', 'r') as file:
    reader = csv.reader(file)
    wallet_addresses = [row[0] for row in reader]

# Функція для створення підпису
def generate_signature(timestamp, method, request_path, body, secret_key):
    body_str = json.dumps(body) if body else ''
    message = timestamp + method + request_path + body_str
    mac = hmac.new(secret_key.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
    return base64.b64encode(mac.digest()).decode('utf-8')

# Функція для перевірки балансу
def check_balance():
    url = '/api/v5/account/balance'
    base_url = 'https://www.okx.com'
    timestamp = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'
    method = 'GET'
    body = ''

    signature = generate_signature(timestamp, method, url, body, api_keys['secret_key'])
    headers = {
        'OK-ACCESS-KEY': api_keys["api_key"],
        'OK-ACCESS-SIGN': signature,
        'OK-ACCESS-TIMESTAMP': timestamp,
        'OK-ACCESS-PASSPHRASE': api_keys["passphrase"]
    }
    response = requests.get(base_url + url, headers=headers)
    if response.status_code == 200:
        balance_data = response.json()
        return balance_data
    else:
        logging.error(f"Помилка при перевірці балансу: {response.text}")
        return None

# Функція для перевірки комісії
def check_fee():
    # Логіка для перевірки комісії
    pass

# Функція для виведення коштів
def withdraw(amount, address):
    url = '/api/v5/asset/withdrawal'
    base_url = 'https://www.okx.com'
    timestamp = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'
    method = 'POST'
    body = {
        'currency': config["currency"],
        'amount': amount,
        'destination': '4',  # 4 - адреса гаманця
        'toAddress': address,
        'chain': config["chain"],
        'fee': config["max_fee"],
        'pwd': api_keys["withdrawal_password"]
    }

    signature = generate_signature(timestamp, method, url, body, api_keys['secret_key'])
    headers = {
        'OK-ACCESS-KEY': api_keys["api_key"],
        'OK-ACCESS-SIGN': signature,
        'OK-ACCESS-TIMESTAMP': timestamp,
        'OK-ACCESS-PASSPHRASE': api_keys["passphrase"],
        'Content-Type': 'application/json'
    }
    response = requests.post(base_url + url, headers=headers, json=body)
    if response.status_code == 200:
        logging.info(f"Успішне виведення {amount} {config['currency']} на адресу {address}")
        print(f"Успішне виведення {amount} {config['currency']} на адресу {address}")
    else:
        logging.error(f"Помилка при виведенні: {response.text}")
        print(f"Помилка при виведенні: {response.text}")

# Основна логіка
def main():
    balance = check_balance()
    if balance:
        print(f"Баланс: {balance}")
        eth_balance = next((item for item in balance['data'][0]['details'] if item['ccy'] == 'ETH'), None)
        if eth_balance and float(eth_balance['availBal']) >= float(config["amount"]):
            # Перевірка комісії
            if check_fee():
                for index in config["wallet_indexes"]:
                    if index <= len(wallet_addresses):
                        address = wallet_addresses[index - 1]
                        withdraw(config["amount"], address)
                    else:
                        logging.error(f"Індекс {index} перевищує кількість адрес у файлі")
            else:
                print("Комісія перевищує максимальне обмеження")
        else:
            print("Недостатньо коштів на балансі")
    else:
        print("Не вдалося отримати баланс")

    # Щоб скрипт не закривався після виконання
    while True:
        time.sleep(1)

if __name__ == "__main__":
    main()
